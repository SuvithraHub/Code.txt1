class Student:
    def __init__(self, sid, name, room, block):
        self.id = sid
        self.name = name
        self.room = room
        self.block = block
        self.next = None
        self.prev = None


class HostelAllotment:
    def __init__(self):
        self.head = None

    # Create and add student
    def add_student(self, sid, name, room, block):
        new_student = Student(sid, name, room, block)
        if self.head is None:
            self.head = new_student
            return
        temp = self.head
        while temp.next:
            temp = temp.next
        temp.next = new_student
        new_student.prev = temp

    # Remove student by ID
    def remove_student(self, sid):
        temp = self.head
        while temp:
            if temp.id == sid:
                if temp.prev:
                    temp.prev.next = temp.next
                else:
                    self.head = temp.next
                if temp.next:
                    temp.next.prev = temp.prev
                print(f"Student with ID {sid} removed.")
                return
            temp = temp.next
        print("Student not found.")

    # Search by name or room
    def search(self, query):
        temp = self.head
        found = False
        while temp:
            if temp.name == query or str(temp.room) == query:
                print(f"Found: {temp.id} {temp.name} {temp.room} {temp.block}")
                found = True
            temp = temp.next
        if not found:
            print("No match found.")

    # Display block-wise
    def display_by_block(self):
        for blk in map(chr, range(65, 91)):  # A-Z
            temp = self.head
            while temp:
                if temp.block.upper() == blk:
                    print(f"{temp.id} {temp.name} {temp.room} {temp.block}")
                temp = temp.next

    # Reverse display
    def display_reverse(self):
        temp = self.head
        if not temp:
            return
        while temp.next:
            temp = temp.next
        while temp:
            print(f"{temp.id} {temp.name} {temp.room} {temp.block}")
            temp = temp.prev

    # Clone list
    def clone_list(self):
        new_head = None
        new_tail = None
        temp = self.head
        while temp:
            node = Student(temp.id, temp.name, temp.room, temp.block)
            if not new_head:
                new_head = new_tail = node
            else:
                new_tail.next = node
                node.prev = new_tail
                new_tail = node
            temp = temp.next

        print("Cloned list:")
        cur = new_head
        while cur:
            print(f"{cur.id} {cur.name} {cur.room} {cur.block}")
            cur = cur.next

    # Count students per block
    def count_per_block(self):
        count = {}
        temp = self.head
        while temp:
            count[temp.block] = count.get(temp.block, 0) + 1
            temp = temp.next
        for blk, c in count.items():
            print(f"Block {blk}: {c} students")


# Driver menu
def main():
    system = HostelAllotment()
    while True:
        print("\n1. Add Allotment\n2. Remove Student\n3. Search\n4. Display Block-wise\n5. Reverse Display\n6. Clone List\n7. Count Per Block\n8. Exit")
        choice = input("Choice: ")
        if choice == "1":
            sid = int(input("Enter ID: "))
            name = input("Enter Name: ")
            room = int(input("Enter Room: "))
            block = input("Enter Block: ").upper()
            system.add_student(sid, name, room, block)
        elif choice == "2":
            sid = int(input("Enter ID to remove: "))
            system.remove_student(sid)
        elif choice == "3":
            query = input("Enter Name or Room: ")
            system.search(query)
        elif choice == "4":
            system.display_by_block()
        elif choice == "5":
            system.display_reverse()
        elif choice == "6":
            system.clone_list()
        elif choice == "7":
            system.count_per_block()
        elif choice == "8":
            break
        else:
            print("Invalid choice.")


if __name__ == "__main__":
    main()